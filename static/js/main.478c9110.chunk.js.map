{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","Appssr.js","index.js"],"names":["module","exports","__webpack_require__","p","SearchProfile","React","Component","react_default","a","createElement","className","onSubmit","this","handleForm","bind","type","ref","placeholder","e","preventDefault","username","refs","getDOMNode","value","props","fetchProfile","Profile","data","followers","concat","homeUrl","repositories","following","notFound","href","target","title","name","src","avatar","alt","location","repos","Boolean","window","hostname","match","Appssr","ReactDOM","hydrate","src_Appssr","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wJCsDlCC,SAlDYC,IAAMC,2LAoDpB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACZH,EAAAC,EAAAC,cAAA,QAAME,SAAUC,KAAKC,WAAWC,KAAKF,OACnCL,EAAAC,EAAAC,cAAA,aAAOF,EAAAC,EAAAC,cAAA,SAAOM,KAAK,SAASC,IAAI,WAAWC,YAAY,gEAMrDC,GACVA,EAAEC,iBACD,IAAIC,EAAWR,KAAKS,KAAKD,SAASE,aAAaC,MAC/CX,KAAKY,MAAMC,aAAaL,GACxBR,KAAKS,KAAKD,SAASE,aAAaC,MAAQ,UAfhBlB,IAAMC,YAmB5BoB,mLAEF,IAAIC,EAAOf,KAAKY,MAAMG,KAClBC,EAAS,GAAAC,OAAMF,EAAKG,QAAX,cACTC,EAAY,GAAAF,OAAMF,EAAKG,QAAX,qBACZE,EAAS,GAAAH,OAAMF,EAAKG,QAAX,cACb,MAAsB,cAAlBH,EAAKM,SAEJ1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACZH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,+EAKJF,EAAAC,EAAAC,cAAA,WAASC,UAAU,mBACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,KAAGyB,KAAMP,EAAKG,QAASK,OAAO,SAASC,MAAOT,EAAKU,MAAQV,EAAKP,UAAUb,EAAAC,EAAAC,cAAA,OAAK6B,IAAKX,EAAKY,OAAQC,IAAKb,EAAKP,YAC3Gb,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGyB,KAAMP,EAAKG,QAASM,MAAOT,EAAKP,SAAUe,OAAO,UAAUR,EAAKU,MAAQV,EAAKP,WACpFb,EAAAC,EAAAC,cAAA,UAAKkB,EAAKc,UAAY,sBAExBlC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,UACGF,EAAAC,EAAAC,cAAA,UACGF,EAAAC,EAAAC,cAAA,KAAGyB,KAAMN,EAAWO,OAAO,SAASC,MAAM,uBAAsB7B,EAAAC,EAAAC,cAAA,SAAIkB,EAAKC,WAAcrB,EAAAC,EAAAC,cAAA,2BAE1FF,EAAAC,EAAAC,cAAA,UACGF,EAAAC,EAAAC,cAAA,KAAGyB,KAAMH,EAAcI,OAAO,SAASC,MAAM,yBAAwB7B,EAAAC,EAAAC,cAAA,SAAIkB,EAAKe,OAAUnC,EAAAC,EAAAC,cAAA,6BAE3FF,EAAAC,EAAAC,cAAA,UACGF,EAAAC,EAAAC,cAAA,KAAGyB,KAAMF,EAAWG,OAAO,SAASC,MAAM,uBAAsB7B,EAAAC,EAAAC,cAAA,SAAIkB,EAAKK,WAAczB,EAAAC,EAAAC,cAAA,qCA9BnFJ,IAAMC,WC7DRqC,QACW,cAA7BC,OAAOH,SAASI,UAEe,UAA7BD,OAAOH,SAASI,UAEhBD,OAAOH,SAASI,SAASC,MACvB,+DCNSC,mLARX,OACExC,EAAAC,EAAAC,cAAA,kCAHeH,aCIrB0C,IAASC,QAAQ1C,EAAAC,EAAAC,cAACyC,EAAD,MAAUC,SAASC,eAAe,SF2H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.478c9110.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\n// import './App.scss';\nconst API = 'https://api.github.com/users';\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      username: 'theham3d',\n      name:'',\n      avatar:'',\n      location:'',\n      repos:'',\n      followers: '',\n      following:'',\n      homeUrl:'',\n      notFound:''\n    }\n  }\n  fetchProfile(username) { \n    let url = `${API}/${username}`;\n    //hitml fetch api\n    fetch(url)\n      .then((res) => res.json() )\n      .then((data) => {\n        this.setState({\n          username: data.login,\n          name: data.name,\n          avatar: data.avatar_url,\n          location: data.location,\n          repos: data.public_repos,\n          followers: data.followers,\n          following: data.following,\n          homeUrl: data.html_url,\n          notFound: data.message\n        })\n      })\n      .catch((error) => console.log('Oops! . There Is A Problem') )\n  }\n  componentDidMount() {\n    this.fetchProfile(this.state.username);\n  }\n  render() {\n    return (\n      <div>\n         <section id=\"card\">\n           <SearchProfile fetchProfile={this.fetchProfile.bind(this)}/>\n           <Profile data={this.state} />\n         </section>\n          <span className=\"hesmaili\">GitHub Card With ReactJs - Created By <a href=\"https://twitter.com/theham3d\" target=\"_blank\" title=\"Hamed Esmaili\">Hamed Esmaili</a></span>\n      </div>\n    )\n  }\n}\nclass SearchProfile extends React.Component {\n  render() {\n    return (\n      <div className=\"search--box\">\n         <form onSubmit={this.handleForm.bind(this)}>\n           <label><input type=\"search\" ref=\"username\" placeholder=\"Type Username + Enter\"/></label>\n         </form>\n      </div>\n    )\n  }\n  \n  handleForm(e) {\n   e.preventDefault();\n    let username = this.refs.username.getDOMNode().value\n    this.props.fetchProfile(username);\n    this.refs.username.getDOMNode().value = '';\n  }\n}\n\nclass Profile extends React.Component {\n  render() {\n    let data = this.props.data;\n    let followers = `${data.homeUrl}/followers`;\n    let repositories = `${data.homeUrl}?tab=repositories`;\n    let following = `${data.homeUrl}/following`;\n    if (data.notFound === 'Not Found')\n      return (\n         <div className=\"notfound\">\n            <h2>Oops !!!</h2>\n            <p>The Component Couldn't Find The You Were Looking For . Try Again </p>\n         </div>\n      );\n      else\n      return (\n        <section className=\"github--profile\">\n          <div className=\"github--profile__info\">\n            <a href={data.homeUrl} target=\"_blank\" title={data.name || data.username}><img src={data.avatar} alt={data.username}/></a>\n            <h2><a href={data.homeUrl} title={data.username} target=\"_blank\">{data.name || data.username}</a></h2>\n            <h3>{data.location || 'I Live In My Mind'}</h3>\n          </div>\n          <div className=\"github--profile__state\">\n            <ul>\n               <li>\n                  <a href={followers} target=\"_blank\" title=\"Number Of Followers\"><i>{data.followers}</i><span>Followers</span></a>\n               </li>\n               <li>\n                  <a href={repositories} target=\"_blank\" title=\"Number Of Repositoriy\"><i>{data.repos}</i><span>Repositoriy</span></a>\n               </li>\n               <li>\n                  <a href={following} target=\"_blank\" title=\"Number Of Following\"><i>{data.following}</i><span>Following</span></a>\n               </li>\n            </ul>\n          </div>\n        </section>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\n\r\nclass Appssr extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        hello world;\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Appssr;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport App3 from './Appssr';\nReactDOM.hydrate(<App3 />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}